                                               EXCEPTION HANDLING


CODE 1 :

public class DivisionExample {
    public static void main(String[] args) {
        // Hardcoded numerator and denominator
        int numerator = 10;
        int denominator = 0;

        try {
            // Perform division
            int result = divide(numerator, denominator);
            System.out.println("Result: " + result);
        } catch (ArithmeticException e) {
            // Catch any arithmetic exception (e.g., division by zero)
            System.out.println("Error: Cannot divide by zero.");
        } finally {
            // This block will always execute
            System.out.println("Execution completed.");
        }
    }

    // Method to perform division
    public static int divide(int numerator, int denominator) throws ArithmeticException {
        return numerator / denominator;
    }
}



CODE 2 :

public class Main {
    public static void main(String[] args) {
        try {
            // Creating a Person object with a valid age
            Person person1 = new Person("John Doe", 25);
            System.out.println(person1);

            // Creating a Person object with an invalid age
            Person person2 = new Person("Jane Doe", -5);
            System.out.println(person2);
        } catch (InvalidAgeException e) {
            System.out.println("Caught an exception: " + e.getMessage());
        }

        try {
            // Creating a Person object with a valid age
            Person person3 = new Person("Alice", 30);
            System.out.println(person3);

            // Setting an invalid age
            person3.setAge(200);
        } catch (InvalidAgeException e) {
            System.out.println("Caught an exception: " + e.getMessage());
        }
    }
}



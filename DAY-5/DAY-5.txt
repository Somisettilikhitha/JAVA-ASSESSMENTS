                                    MULTITHREADING AND CONCURRENCY

CODE 1 :

public class MultiThreadExample {

    public static void main(String[] args) {
        // Create and start the first thread that prints numbers from 1 to 50
        Thread thread1 = new Thread(new NumberPrinter(1, 50));
        thread1.start();

        // Create and start the second thread that prints numbers from 51 to 100
        Thread thread2 = new Thread(new NumberPrinter(51, 100));
        thread2.start();
    }

    // Runnable class to print numbers in a given range
    public static class NumberPrinter implements Runnable {
        private int start;
        private int end;

        public NumberPrinter(int start, int end) {
            this.start = start;
            this.end = end;
        }

        @Override
        public void run() {
            for (int i = start; i <= end; i++) {
                System.out.println(i);
                // Optional: Sleep for a short time to see the output more clearly
                try {
                    Thread.sleep(50); // Sleep for 50 milliseconds
                } catch (InterruptedException e) {
                    System.out.println("Thread interrupted: " + e.getMessage());
                }
            }
        }
    }
}


CODE 2  :

public class SynchronizedExample {

    // Shared counter variable
    private int counter = 0;

    // Synchronized method to safely increment the counter
    public synchronized void increment() {
        counter++;
    }

    // Method to get the current value of the counter
    public int getCounter() {
        return counter;
    }

    public static void main(String[] args) {
        SynchronizedExample example = new SynchronizedExample();

        // Create and start multiple threads that increment the counter
        Thread thread1 = new Thread(new IncrementTask(example));
        Thread thread2 = new Thread(new IncrementTask(example));
        Thread thread3 = new Thread(new IncrementTask(example));

        thread1.start();
        thread2.start();
        thread3.start();

        // Wait for all threads to finish
        try {
            thread1.join();
            thread2.join();
            thread3.join();
        } catch (InterruptedException e) {
            System.out.println("Thread interrupted: " + e.getMessage());
        }

        // Print the final value of the counter
        System.out.println("Final counter value: " + example.getCounter());
    }

    // Runnable task that increments the counter
    public static class IncrementTask implements Runnable {
        private SynchronizedExample example;

        public IncrementTask(SynchronizedExample example) {
            this.example = example;
        }

        @Override
        public void run() {
            for (int i = 0; i < 100; i++) {
                example.increment();
            }
        }
    }
}

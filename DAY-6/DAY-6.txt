                                            DATA STRUCTURES

CODE 1 :

public class Stack {
    private int[] stack;
    private int top;
    private int capacity;

    // Constructor to initialize the stack
    public Stack(int size) {
        stack = new int[size];
        capacity = size;
        top = -1;
    }

    // Push method to add an element to the stack
    public void push(int element) {
        if (isFull()) {
            System.out.println("Stack overflow. Unable to push " + element);
        } else {
            stack[++top] = element;
            System.out.println("Pushed " + element);
        }
    }

    // Pop method to remove and return the top element of the stack
    public int pop() {
        if (isEmpty()) {
            System.out.println("Stack underflow. Unable to pop");
            return -1; // Return an invalid value to indicate error
        } else {
            return stack[top--];
        }
    }

    // Peek method to view the top element of the stack without removing it
    public int peek() {
        if (isEmpty()) {
            System.out.println("Stack is empty. Nothing to peek");
            return -1; // Return an invalid value to indicate error
        } else {
            return stack[top];
        }
    }

    // Method to check if the stack is empty
    public boolean isEmpty() {
        return top == -1;
    }

    // Method to check if the stack is full
    public boolean isFull() {
        return top == capacity - 1;
    }

    // Main method to test the stack implementation
    public static void main(String[] args) {
        Stack stack = new Stack(5);

        // Push elements onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);// This should show "Stack overflow"

        // Peek at the top element of the stack
        System.out.println("Peek: " + stack.peek());

        // Pop elements from the stack
        System.out.println("Popped: " + stack.pop());
        System.out.println("Popped: " + stack.pop());
        System.out.println("Popped: " + stack.pop());// This should show "Stack underflow"
    }
}

CODE 2 :

public class SimpleQueue {
    private int[] queue;
    private int front;
    private int rear;
    private int size;
    private int capacity;

    // Constructor to initialize the queue with a given size
    public SimpleQueue(int capacity) {
        this.capacity = capacity;
        queue = new int[capacity];
        front = 0;
        rear = -1;
        size = 0;
    }

    // Enqueue method to add an element to the queue
    public void enqueue(int element) {
        if (size == capacity) {
            System.out.println("Queue is full");
        } else {
            rear = (rear + 1) % capacity;
            queue[rear] = element;
            size++;
            System.out.println("Enqueued " + element);
        }
    }

    // Dequeue method to remove and return the front element of the queue
    public int dequeue() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return -1; // Return an invalid value to indicate an error
        } else {
            int element = queue[front];
            front = (front + 1) % capacity;
            size--;
            return element;
        }
    }

    // Peek method to view the front element of the queue without removing it
    public int peek() {
        if (size == 0) {
            System.out.println("Queue is empty");
            return -1; // Return an invalid value to indicate an error
        } else {
            return queue[front];
        }
    }

    // Main method to test the queue implementation
    public static void main(String[] args) {
        SimpleQueue queue = new SimpleQueue(2);

        queue.enqueue(10);
        queue.enqueue(20);
        queue.enqueue(30);// This will show "Queue is full"

        System.out.println("Peek: " + queue.peek());

        System.out.println("Dequeued: " + queue.dequeue());
        System.out.println("Dequeued: " + queue.dequeue());
        System.out.println("Dequeued: " + queue.dequeue());// This will show "Queue is empty"
        
    }
}


                                               COLLECTIONS AND GENERIES
CODE 1:

import java.util.HashMap;
import java.util.Map;

public class CharacterFrequency {
    public static void main(String[] args) {
        String input = "hello world";

        HashMap<Character, Integer> charCountMap = new HashMap<>();

        char[] strArray = input.toCharArray();

        for (char c : strArray) {
            if (charCountMap.containsKey(c)) {
        
                charCountMap.put(c, charCountMap.get(c) + 1);
            } else {
                charCountMap.put(c, 1);
            }
        }

        for (Map.Entry<Character, Integer> entry : charCountMap.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}


CODE 2 :

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;

public class RemoveDuplicates {
    public static void main(String[] args) {
       
        ArrayList<Integer> listWithDuplicates = new ArrayList<>();
        listWithDuplicates.add(1);
        listWithDuplicates.add(2);
        listWithDuplicates.add(3);
        listWithDuplicates.add(2);
        listWithDuplicates.add(4);
        listWithDuplicates.add(3);
        listWithDuplicates.add(5);

        System.out.println("Original List: " + listWithDuplicates);

        List<Integer> listWithoutDuplicates = removeDuplicates(listWithDuplicates);

        System.out.println("List after removing duplicates: " + listWithoutDuplicates);
    }

    public static List<Integer> removeDuplicates(List<Integer> list) {

        HashSet<Integer> set = new HashSet<>(list);
        return new ArrayList<>(set);
    }
}

CODE 3 :

public class Pair<T, U> {
    private T first;
    private U second;

    public Pair(T first, U second) {
        this.first = first;
        this.second = second;
    }

    public T getFirst() {
        return first;
    }

    public void setFirst(T first) {
        this.first = first;
    }

    public U getSecond() {
        return second;
    }

    public void setSecond(U second) {
        this.second = second;
    }

    @Override
    public String toString() {
        return "Pair{" +
                "first=" + first +
                ", second=" + second +
                '}';
    }
    public static void main(String[] args) {
  
        Pair<Integer, String> pair1 = new Pair<>(1, "one");
        System.out.println(pair1);
        System.out.println("First: " + pair1.getFirst());
        System.out.println("Second: " + pair1.getSecond());

        pair1.setFirst(2);
        pair1.setSecond("two");
        System.out.println("After setting new values: " + pair1);

        Pair<Double, Boolean> pair2 = new Pair<>(3.14, true);
        System.out.println(pair2);
        System.out.println("First: " + pair2.getFirst());
        System.out.println("Second: " + pair2.getSecond());

        pair2.setFirst(2.71);
        pair2.setSecond(false);
        System.out.println("After setting new values: " + pair2);
    }
}
